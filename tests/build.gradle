buildscript {
    repositories {
        mavenCentral()
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'

String JNIGEN_GENERATED_PATH = "src/cpp/generated"
String JNIGEN_OUTPUT_LIST_NAME = "outputs.txt"

sourceCompatibility = JavaVersion.VERSION_1_8

dependencies {
    testCompileOnly(files("${project.projectDir}/../jnigen/build/jnigen-annotations.jar"))
    testAnnotationProcessor(files("${project.projectDir}/../jnigen/build/jnigen.jar"))
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.0'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = [
                "-Asmjni.jnigen.dest.path=" + file(JNIGEN_GENERATED_PATH).path,
                "-Asmjni.jnigen.output.list.name=" + JNIGEN_OUTPUT_LIST_NAME,
                "-Asmjni.jnigen.expose.extra=" + ["java.lang.AssertionError"].join(";").toString()
        ]
    outputs.file("$JNIGEN_GENERATED_PATH/$JNIGEN_OUTPUT_LIST_NAME")
}

test {
    useJUnitPlatform()

    systemProperty("java.library.path",
            System.getProperty("java.library.path") + File.pathSeparator + file("build/native"))
}

sourceSets {
    test.java.srcDirs = ['src/java']
}

task cleanStaleJNIHeaders(dependsOn: compileTestJava) {

    doLast {
        def generated = new HashSet<String>()
        def outputs = file("$JNIGEN_GENERATED_PATH/$JNIGEN_OUTPUT_LIST_NAME")
        if (outputs.exists()) {
            outputs.eachLine { line ->
                generated.add(line)
            }
        }
        def existing = project.fileTree(dir: file("$JNIGEN_GENERATED_PATH"), include: "*.h").files
        def toDelete = []
        for (file in existing) {
            if (!generated.contains(file.name))
                toDelete.add(file)
        }

        project.delete { delete toDelete }
    }
}

task buildNative(dependsOn: cleanStaleJNIHeaders) {

    doLast {
        project.exec {
            commandLine = [
                    "cmake",
                    "-DSMJNI_INCLUDE_TESTS=true",
                    "-S", projectDir.parent,
                    "-B", file("../build").toString()
            ]
        }
        project.exec {
            commandLine = [
                    "cmake",
                    "--build", file("../build").toString(),
                    "--config", "Debug",
                    "--target", "smjnitests",
                    "--target", "install"
            ]
        }
    }
}

project.tasks.test.dependsOn(buildNative)

