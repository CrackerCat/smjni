/*
 Copyright 2019 SmJNI Contributors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

import java.util.regex.Pattern

buildscript {
    repositories {
        mavenCentral()
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'

String JNIGEN_GENERATED_PATH = "src/cpp/generated"
String JNIGEN_OUTPUT_LIST_NAME = "outputs.txt"

sourceCompatibility = JavaVersion.VERSION_1_8

dependencies {
    testCompileOnly 'smjni.jnigen:annotations'
    testAnnotationProcessor("smjni.jnigen:processor@jar") {
        transitive true
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.0'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = [
                "-Asmjni.jnigen.dest.path=" + file(JNIGEN_GENERATED_PATH).path,
                "-Asmjni.jnigen.output.list.name=" + JNIGEN_OUTPUT_LIST_NAME,
                "-Asmjni.jnigen.expose.extra=" + ["java.lang.AssertionError"].join(";").toString()
        ]
    outputs.file("$JNIGEN_GENERATED_PATH/$JNIGEN_OUTPUT_LIST_NAME")
}

test {
    useJUnitPlatform()

    systemProperty("java.library.path",
            System.getProperty("java.library.path") + File.pathSeparator + file("build/native"))
}

sourceSets {
    test.java.srcDirs = ['src/java']
}

task cleanStaleJNIHeaders(dependsOn: compileTestJava) {

    inputs.files file("$JNIGEN_GENERATED_PATH/$JNIGEN_OUTPUT_LIST_NAME")

    doLast {
        def generated = new HashSet<String>()
        def outputs = file("$JNIGEN_GENERATED_PATH/$JNIGEN_OUTPUT_LIST_NAME")
        if (outputs.exists()) {
            outputs.eachLine { line ->
                generated.add(line)
            }
        }
        def existing = project.fileTree(dir: file("$JNIGEN_GENERATED_PATH"), include: "*.h").files
        def toDelete = []
        for (file in existing) {
            if (!generated.contains(file.name))
                toDelete.add(file)
        }

        project.delete { delete toDelete }
    }
}

task buildNative(dependsOn: cleanStaleJNIHeaders) {

    doLast {
        project.exec {
            commandLine = [
                    "cmake",
                    "-DSMJNI_INCLUDE_TESTS=true",
                    "-S", file("src/cpp").toString(),
                    "-B", file("build/native").toString()
            ]
        }
        project.exec {
            commandLine = [
                    "cmake",
                    "--build", file("build/native").toString(),
                    "--config", "Release",
                    "--target", "smjnitests",
                    "--target", "install"
            ]
        }
    }
}

project.tasks.test.dependsOn(buildNative)
project.tasks.testClasses.dependsOn(buildNative)

