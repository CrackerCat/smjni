/*
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

plugins {
    id 'java'
    id 'kotlin'
    id 'groovy'
    id 'org.jetbrains.dokka' version '0.9.18'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compileOnly files("${System.properties['java.home']}/../lib/tools.jar")

    implementation gradleApi()
    implementation localGroovy()
}


sourceSets {
    main.kotlin.srcDirs = ['src']
    main.java.srcDirs = ['src']
    main.groovy.srcDirs = ['src']
    main.resources.srcDirs = ['res']
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'SmJNI Code Generator',
                   'Implementation-Version': project.version,
                   'Main-Class': 'smjni.jnigen.Runner'
    }
    metaInf { from('META-INF') }

    setArchiveName("jnigen.jar")
    setDestinationDir(rootProject.buildDir)
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    if (!JavaVersion.current().java10Compatible) {
        outputFormat = "javadoc"
    }
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src'
    reportUndocumented = false
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava, sourceSets.main.kotlin, sourceSets.main.groovy
    classifier "sources"
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    from javadoc.destinationDir
    classifier 'javadoc'
}

publishing {
    publications {
        myPublicationName(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom {
                name = "SmJNI Code Generator"
                description = "Annotation processor that generates SmJNI C++ code from Java annotations"
                url = "https://github.com/smartsheet-mobile/smjni"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                scm {
                    connection = "git@github.com:smartsheet-mobile/smjni.git"
                    developerConnection = "git@github.com:smartsheet-mobile/smjni.git"
                    url = "https://github.com/smartsheet-mobile/smjni.git"
                }
            }
        }
    }
}



